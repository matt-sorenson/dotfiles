#! /usr/bin/env zsh

pre-commit() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return
    setopt null_glob
    setopt typeset_to_unset
    setopt warn_create_global
    unsetopt short_loops

    local _usage="Usage pre-commit [-h|--help] [--verbose]"
    local verbose=''

    while (( $# )); do
        case "$1" in
            --verbose)
                verbose='--verbose'
                ;;
            -h|--help)
                print "$_usage"
                return 0
                ;;
            *)
                print-header -e "Unexpected argument '$1'."
                print "$_usage"
                return 1
                ;;
        esac
        shift
    done

    local -a checks=("${DOTFILES}/githooks/"*.pre-commit)

    if (( ! ${#checks[@]} )); then
        print-header cyan "No pre-commit hooks found."
        return 0
    fi

    local -a all_staged_files=("${(@f)$(git diff --cached --name-only --diff-filter=ACM)}")

    if (( ! ${#all_staged_files[@]} )); then
        print-header cyan "No staged files found found."
        return 0
    fi

    local -i errors_found=0
    local -i new_errors_found
    local file staged_file precommit_check
    for file in "${all_staged_files[@]}"; do
        # Skip non-existent or non-regular files (can happen with deletions or renames)
        [[ -f $file ]] || continue

        staged_file=$(mktemp)
        # Get the staged instance of the file instead of the
        git show ":${file}" > "${staged_file}"

        new_errors_found=0
        for precommit_check in "${checks[@]}"; do
            if ! "$precommit_check" "$staged_file" "$file" $verbose; then
                new_errors_found=1
                errors_found=1
            fi
        done

        if (( ! new_errors_found )); then
            print "No Errors found in '$file'"
        fi

        # Don't fail the commit cause it can't cleanup the file
        # The OS should clean it up eventually if it's left hanging about.
        rm "$staged_file" || {
            if [[ -n "$verbose" ]]; then
                print "error removing temporary file: '$staged_file'"
            fi
        } || true
    done

    return $errors_found
}

pre-commit "$@"
