#! /usr/bin/env zsh
#compdef dot-check-for-update

dot-check-for-update() {
    emulate -L zsh
    set -uo pipefail
    setopt null_glob err_return typeset_to_unset warn_create_global
    unsetopt short_loops

    local _usage="dot-check-for-update [-h|--help][-g|--git][-l|--local][-b|--brew][-d|--doom] [--auto [time-limit-in-hours]]

Options:
  --auto              Automatically update dotfiles if they haven't been updated recently (15 hours)
  --no-replace-shell  On success do not replace the shell with a new instance.
                      This is normally used so the shell the user has is updated,
                      but does lose some state.
  -h, --help          Show this help message and exit

Tasks:
  -d, --[no]-dotfiles     Update dotfiles reposito
  -p, --[no-]plugins  Update \$DOTFILES/plugins/* folders
  -l, --[no-]local    Update local scripts
  -b, --[no-]brew     Update brew
  -e, --[no-]doom     Update doom emacs

If no tasks are provided then it's treated as if all flags are set.
For all tasks the shortflag can use +<flag> to disable similar to --no-<task>."

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    local -a tasks=(
        dotfiles
        plugins
        local
        brew
        doom
    )

    flags[replace-zsh]=1
    flags[auto]=0

    local task
    for task in "${tasks[@]}"; do
        flags[$task]=1
    done

    short_to_long_flags[d]=dotfiles
    short_to_long_flags[p]=plugins
    short_to_long_flags[l]=local
    short_to_long_flags[b]=brew
    short_to_long_flags[b]=doom

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    if (( flags[auto] )); then
        local date_cmd=()
        if command -v gdate > /dev/null; then
            date_cmd=(gdate -d)
        elif date --version >/dev/null 2>&1; then
            date_cmd=(date -d)
        else
            date_cmd=(date -j -f "%Y-%m-%dT%H:%M:%SZ")
        fi

        local time_limit_in_seconds=$(( 60 * 60 * 15 ))
        local current_time=$(date +%s)
        local cutoff_time=$(( current_time - time_limit_in_seconds ))
        unset current_time

        local -i last_update
        local update_filename="${DOTFILES}/tmp/dotfile-update"
        if [[ -r "${update_filename}" ]]; then
            if ! last_update="$( "${date_cmd[@]}" "$(<"$update_filename")" "+%s" )"; then
                last_update=0
            fi
        else
            last_update=0
        fi

        if (( last_update < cutoff_time )); then
            local REPLY
            print -n "It's been a while, update dotfiles? "
            read -q
            print ''
            if [[ "${REPLY}" != "y" ]]; then
                return 0
            fi
            unset REPLY
        else
            return 0
        fi
    fi

    local -i all_true=1
    for task in "${tasks[@]}"; do
        if (( ! flags[$task] )); then
            all_true=0
            break
        fi
    done

    # We use this instead of exiting early so that we can try to update
    # everything even if one fails
    local -i out=0

    if (( flags[dotfiles] )); then
        print-header green "Updating dotfiles repo."
        if [[ -d "${DOTFILES}" ]]; then
            local dotfiles_starting_commit="$(git rev-parse --short HEAD)"

            if dot-check-for-update-git -i 2 "${DOTFILES}"; then
                # If hammerspoon exists we may have updated the config while updating
                # the dotfiles, so we need to reload it.
                if command -v "hs" > /dev/null; then
                    local dotfiles_ending_commit="$(git rev-parse --short HEAD)"
                    local hs_changes=($(git diff --name-only "$dotfiles_starting_commit" "$dotfiles_ending_commit" -- hammerspoon/))

                    if (( ${#hs_changes} )); then
                        print-header green "Reloading hammerspoon"
                        hs -c "hs.reload()"
                    fi
                fi
            else
                out=1
            fi
        else
            print-header -w "${DOTFILES} does not exist, skipping dotfiles update."
        fi
    fi

    if (( flags[plugins] )); then
        local repos_to_update=( "${DOTFILES}"/plugins/*(/) ) # ZSH Does handle spaces in the glob correctly.
        local repo quiet
        for repo in "${repos_to_update[@]}"; do
            if [[ $repo == */local ]]; then
                continue
            fi

            if ! dot-check-for-update-git -i 2 "${repo}"; then
                out=1
            fi
        done
    fi

    if [[ flags[brew] -eq 1 && "${OSTYPE}" == darwin* ]]; then
        if command -v "brew" > /dev/null; then
            print-header green "Updating brew."

            if brew update; then
                if ! brew upgrade; then
                    print-header -e -i 2 "brew: Failed to upgrade."
                    out=1
                fi
            else
                print-header -e -i 2 "brew: Failed to update."
                out=1
            fi
        else
            local flag='-w'
            if (( ! specified_task )); then
                flag='-e'
                out=1
            fi
            print-header "${flag}" -i 2 "brew: 'brew' is not installed."
        fi
    fi

    if (( flags[local] )); then
        if ! dot-check-for-update-git --extra-quiet "${DOTFILES}/local"; then
            out=1
        fi

        # You can specify a local update function in your "$DOTFILES/local/zsh"
        # files or in $DOTFILES/local/bin
        if command -v "dot-check-for-update-local" > /dev/null; then
            if ! dot-check-for-update-local; then
                out=1
            fi
        fi
    fi

    if (( flags[doom] )); then
        local doomemacs_bin="${DOOMEMACS_BIN:-${HOME}/.config/emacs/bin/doom}"
        if command -v "${doomemacs_bin}" > /dev/null; then
            print-header green "Updating doom emacs."

            if ! "${doomemacs_bin}" upgrade --aot --force --color; then
                print-header -e -i 2 "doom emacs failed to upgrade."
                out=1
            fi
        fi
    fi

    # Only update the timestamp if all updates were successful & we didn't
    # skip any updates
    if (( ! out && all_true )); then
        local update_filename="${DOTFILES}/tmp/dotfile-update"
        local current_time
        current_time="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        print -n "${current_time}" >! "${update_filename}"
    fi

    if (( flags[replace-zsh] )); then
        print-header green "Restarting zsh"
        zrestart
    fi

    return $out
}

dot-check-for-update "$@"
