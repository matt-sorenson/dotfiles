#! /usr/bin/env zsh
#compdef concat-video

concat-video() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    local _usage='Usage: concat-video [OPTIONS]

Required:
  -f, --file <filename>        filename to base concat off of

Options:
  -e, --extension <.extension>  output file extension (default: .m4v)
  -c, --crop w:h:x:y            crop to dimensions w:h:x:y
  -t, --trim <seconds>          trim intro from 2nd,3rd... in seconds (default: 0)
  -h, --help                    show this help and exit'

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    option_args[extension]=str
    option_args[file]=file
    option_args[crop]=str
    option_args[trim]=str
    short_to_long_opts[e]=extension
    short_to_long_opts[f]=r:file
    short_to_long_opts[c]=crop
    short_to_long_opts[t]=trim

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then # Help was output
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    if ! command -v ffmpeg > /dev/null; then
        print-header -e "ffmpeg not found. Please install ffmpeg to use this script."
        return 1
    fi

    options[extension]="${options[extension]:-.m4v}"

    local base=${options[file]:t}  # Base filename without path
    local dir=${options[file]:A:h} # Absolute path to directory

    # Validate filename format
    if ! print "${base}" | grep -Eq '^(.*?) *pt\.?([0-9]+)(\..*)$'; then
        print "Could not parse filename for part: ${options[file]}" >&2
        return 1
    fi

    # Extract prefix
    local prefix=$(sed -E 's/^(.*?) *pt\.?[0-9]+(\..*)$/\1/' <<< "${base}")

    # Prepare output
    local outdir="${dir}/converted"
    mkdir -p "${outdir}"
    local final_filename="${outdir}/${prefix}${options[extension]}"

    # Gather & sort parts
    local glob_file_list=("${dir}/${prefix}"*)
    if (( ! $#glob_file_list )); then
        print-header -e "No files found for ${prefix}"
        return 1
    fi

    local files_partlist=()
    local f
    local -i n
    for f in "${glob_file_list[@]}"; do
        case "${f}" in
            *pt.?([0-9]).*)
            n="${${f##*pt.}%%.*}"
            files_partlist+=("${n} ${(q)f}")
            ;;
            *) continue ;;
        esac
    done

    local old_IFS="${IFS}"
    # Sort files_partlist numerically by the numeric prefix (n)
    IFS=$'\n' files_partlist=("${(on)files_partlist[@]}")
    IFS="${old_IFS}"

    local files=()
    for f in "${files_partlist[@]}"; do
        files+=("${f#* }")
    done
    unset files_partlist n

    # Build ffmpeg inputs
    local cmd=("ffmpeg")
    for f in "${files[@]}"; do
        cmd+=(-i "${f}")
    done

    # Build filter_complex
    local filter_complex=''
    local -i i=0
    for f in "${files[@]}"; do
        # Don't trim the first part.
        local start_trim=$(( i ? options[trim] : 0 ))

        filter_complex="${filter_complex}[$i:v]setpts=PTS-STARTPTS,trim=start=$start_trim"
        [[ -v 'options[crop]' ]] && filter_complex="${filter_complex},crop=${options[crop]}"
        filter_complex="${filter_complex}[v$i]; "

        filter_complex="${filter_complex}[$i:a]asetpts=PTS-STARTPTS"
        (( start_trim )) && filter_complex="${filter_complex},atrim=start=$start_trim"
        filter_complex="${filter_complex}[a$i]; "

        i=$((i + 1))
    done

    # Concatenate streams
    local concat_inputs=''
    local -i j
    for j in $(seq 0 $((i - 1))); do
        concat_inputs="${concat_inputs}[v$j][a$j]"
    done
    filter_complex="${filter_complex}${concat_inputs}concat=n=$i:v=1:a=1[out]"

    # Final ffmpeg command
    cmd+=(-filter_complex "${filter_complex}")
    cmd+=(-c:v libx264)
    cmd+=(-crf 15)
    cmd+=(-preset veryslow)
    cmd+=(-map '[out]')
    cmd+=("${final_filename}")

    if ! "${cmd[@]}"; then
        local status=$?
        print-header -e "ffmpeg failed with exit code $status"
        return $status
    fi

    print-header green --icon âœ… "Successfully created ${final_filename}"
}

concat-video "$@"
