#! /usr/bin/env zsh
#compdef dot-check-for-update-git

dot-check-for-update-git() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    local _usage="dot-check-for-update-git [-h|--help][-q|quiet][-i|--indent <indent>] <dir>

    Options:
    -h, --help            Show this help message
    -q, --quiet           Suppress some warnings.
    -e, --extra-quiet         Suppress all output if directory not a repo or has no remotes.

    If no flags are provided then it's treated as if all flags are set."

    eval "$(dot-parse-opts --dot-parse-opts-init)"
    short_to_long_flags[q]=quiet
    short_to_long_flags[e]=extra-quiet
    flags[quiet]=0
    flags[extra-quiet]=0

    max_positional_count=1
    min_positional_count=1
    dot_parse_opts_errors[too-many-positional]="Only 1 repo may be provided"
    dot_parse_opts_errors[too-few-positional]="You must provide a directory to check for updates"

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    set -- "${positional_args[@]}"

    local dir="${1}"

    if [[ ! -d "${dir}" ]]; then
        if (( ! flags[extra-quiet] )); then
            print-header -w "${dir}: Missing Directory"
        fi
        return 0
    fi

    # canonicalize the directory path
    dir="${dir:A}"
    local indent="${options[indent]:-0}"

    local log_dir="${dir}"
    case $dir in
        "${HOME}")                log_dir='~' ;;
        "${HOME}/"*)              log_dir="~${dir#"${HOME}"}" ;;
        *)                        ;;
    esac

    if ! git -C "${dir}" rev-parse --is-inside-work-tree &>/dev/null; then
        if (( ! flags[extra-quiet] )); then
            if (( flags[quiet] )); then
                print-header -w "${log_dir}: Directory not a git repo"
            else
                print "${log_dir}: Directory not a git repo"
            fi
        fi
        return 0
    elif [[ "$(git -C "$dir" rev-parse --show-toplevel 2> /dev/null)" != "$dir" ]]; then
        if (( ! flags[quiet] )); then
            print-header blue "${log_dir}: Directory is not the root of a git repository, skipping"
        fi
        return 0
    fi

    local remotes=(${(f)"$(git -C "${dir}" remote)"}) # zsh handles spaces correctly with (f)

    if (( flags[extra-quiet] )); then
        if (( ${#remotes} == 0 )); then
            return 0
        fi
    fi

    if (( ${#remotes} == 0 )); then
        if (( ! flags[quiet] )); then
            print-header -w "${log_dir}: No git remote found, skipping update"
        else
            print "No git remote found, skipping update"
        fi
        return 0
    fi

    git -C "${dir}" fetch

    local branch
    branch="$(git -C "${dir}" rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)"
    if [[ -n "${branch}" ]]; then
        if git -C "${dir}" merge-base --is-ancestor HEAD "${branch}"; then
            git -C "${dir}" merge "${branch}"
        elif ! git -C "${dir}" merge-base --is-ancestor "${branch}" HEAD; then
            print-header -e "${log_dir}: Local branch has diverged from upstream"
            return 1
        fi
    else
        print-header -e "${log_dir}: No upstream branch found for $(git -C "${dir}" rev-parse --abbrev-ref HEAD)"
        return 0
    fi

    git -C "${dir}" diff --quiet --ignore-submodules HEAD || {
        print-header -e "${log_dir}: Uncommitted changes found"
        return 1
    }

    # Check if branch is behind or has diverged (but NOT just ahead)
    local behind_ahead ahead behind
    if behind_ahead=$(git -C "${dir}" rev-list --left-right --count HEAD...@{u} 2>/dev/null); then
        ahead=$(print "${behind_ahead}" | awk '{print $1}')
        behind=$(print "${behind_ahead}" | awk '{print $2}')

        if (( behind > 0 && ahead > 0 )); then
            print-header -e "${log_dir}: Branch has diverged from upstream. ${ahead} commits ahead and ${behind} commits behind"
            return 1
        elif (( behind > 0 )); then
            print-header -e "${log_dir}: Branch is behind upstream by ${behind} commits"
            return 1
        elif (( ahead > 0 )); then
            if (( ! flags[quiet] )); then
                print "${log_dir}: Branch is ahead of upstream by ${ahead} commits"
            fi
        fi
    else
        print-header -w "${log_dir}: Unable to compare with upstream"
        return 1
    fi

    return 0
}

dot-check-for-update-git "$@"
