#! /usr/bin/env zsh
#compdef dot-print-map

dot-print-map() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    local _usage="Usage: dot-print-map [-h|--help] <map_name>

Options:
  -h, --help    Show this message"

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    min_positional_count=1
    max_positional_count=1

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then # Help was output
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    local map_name="${positional_args[1]}"

    local type
    if ! type="$(typeset -p "$map_name" 2>/dev/null)"; then
        print-header -e "Error: '$map_name' is not defined."
        return 1
    fi

    if [[ "$type" != *-A* ]]; then
        print-header -e "Error: '$map_name' is not an associative array."
        return 1
    fi

    local keys
    eval "keys=(\"\${(@k)$map_name}\")"
    local key value cmd
    for key in "${keys[@]}"; do
        cmd='${'"$map_name"'[$key]}'
        value=$(eval "print \"$cmd\"")
        printf "%s => %s\n" "$key" "$value"
    done
}

dot-print-map "$@"
