#! /usr/bin/env zsh
#compdef ws-clone

ws-clone() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    if (( $# )) && [[ "$1" == --describe ]]; then
        print -n "Clone a git repo into a subdirectory of \${WORKSPACE_ROOT_DIR}"
        return 0
    fi

    _ws-clone-usage() {
        local cmd_name="${1:-ws-clone}"

        local softlink_line="\n  -s, --soft-link <ln-dir>  Root of directory to create softlink in"
        local notes="\n\nNotes:\nIf a --root is provided that's not \$WORKSPACE_ROOT_DIR and --no-link is not set then --soft-link will default to \$WORKSPACE_ROOT_DIR"

        if [[ "ws-clone" != "$cmd_name" ]]; then
            softlink_line=''
            notes=''
        fi

        print "${cmd_name} [-h|--help][-s|--softlink <ln-dir>][-r|--root <root-dir>] <remote_url> [<local name>] [-- <git clone extra args>]

Arguments:
  remote_url    The url to clone the repo from
  name          The folder under \$WORKSPACE_ROOT_DIR to clone into

Options:
  -h, --help                Display this message${softlink_line}
  -r, --root <root-dir>     Root workspace directory, will clone into subdirectory. (default: \$WORKSPACE_ROOT_DIR)
  -s, --soft-link           Directory to create the softlink in
  --no-link                 Disable setting a softlink
  --                        Any arguments after this are passed directly to the git clone${notes}"
    }

    TRAPEXIT() {
        exit_trap_emulate_local_function "_ws-clone-usage"
    }

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    max_positional_count=2

    flags[link]=1
    flags[code]=0
    flags[help]=0
    flags[describe]=0

    option_args[cmd-name]=1
    option_args[soft-link]=dir
    option_args[root]=dir
    short_to_long_opts[s]='soft-link'
    short_to_long_opts[r]='root'

    allow_extra_args=1

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( flags[help] )); then
        if [[ -v options[cmd-name] ]]; then
            _ws-clone-usage "$options[cmd-name]"
        else
            _ws-clone-usage
        fi

        return $dot_parse_code
    fi

    set -- "${positional_args[@]}"

    if (( flags[describe] )); then
        print -n "Clone a git repo into a subdirectory of \${WORKSPACE_ROOT_DIR}"
        return 0
    elif (( ! $# )); then
        print-header -e "No project name provided."
        return 1
    fi

    local remote_url=$1

    if [[ ! -v remote_url || -z "${remote_url}" ]]; then
        print-header -e "Remote URL not provided."
        _usage
        return 1
    fi

    if [[ -v options[soft-link] ]]; then
        if [[ ! -e "${options[soft-link]}" ]]; then
            print-header -e "soft link root '$softlink_root' does not exist"
            return 1
        elif [[ ! -d "${options[soft-link]}" ]]; then
            print-header -e "soft link root '$softlink_root' is not a directory"
            return 1
        fi
    fi

    local root="${options[root]:-"$WORKSPACE_ROOT_DIR"}"
    local name="${2:-"${remote_url:t:r}"}"

    if realpath "${root}" > /dev/null; then
        root="$(realpath "${root}")"
    fi

    # Run this in a subshell so the cd isn't carried over in the event of an error.
    (
        setopt err_return

        cd ${(q)root}
        git clone "${remote_url}" "${name}" "${extra_args[@]}"
    )

    local ws_dir="${WORKSPACE_ROOT_DIR:A}"
    if (( flags[link] )) && [[ ! -v options[soft-link] && "${root}" != "${ws_dir}" ]]; then
        options[soft-link]="${ws_dir}"
    fi

    if [[ -v options[soft-link] ]]; then
        ln -s "${WORKSPACE_ROOT_DIR}/${name}" "${options[soft-link]}/${name}"
    fi

    if (( flags[code] )); then
        wscode "${name}"
    fi
}

ws-clone "$@"
