#! /usr/bin/env zsh
#compdef ws-clone

ws-clone() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    _ws-clone-usage() {
        local cmd_name="${1:-ws-clone}"

        local softlink_line="\n  -s, --soft-link <ln-dir>  Root of directory to create softlink in"
        local notes="\n\nNotes:\nIf a --root is provided that's not \$WORKSPACE_ROOT_DIR and --no-link is not set then --soft-link will default to \$WORKSPACE_ROOT_DIR"

        if [[ "ws-clone" != "$cmd_name" ]]; then
            softlink_line=''
            notes=''
        fi

        print "${cmd_name} [-h|--help][-s|--softlink <ln-dir>][-r|--root <root-dir>] <remote_url> [<local name>] [-- <git clone extra args>]

Arguments:
  remote_url    The url to clone the repo from
  name          The folder under \$WORKSPACE_ROOT_DIR to clone into

Options:
  -h, --help                Display this message${softlink_line}
  -r, --root <root-dir>     Root workspace directory, will clone into subdirectory. (default: \$WORKSPACE_ROOT_DIR)
  --no-link                 Disable setting a softlink
  --                        Any arguments after this are passed directly to the git clone${notes}"
    }

    TRAPEXIT() {
        exit_trap_emulate_local_function "_ws-clone-usage"
    }

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    min_positional_count=1
    max_positional_count=2

    flags[link]=1
    flags[code]=0
    flags[help]=0

    option_args[cmd-name]=1
    option_args[softlink-root]=dir
    option_args[root]=dir

    if ! dot-parse-opts "$@"; then
        flags[error]=$?
    fi

    if (( flags[help] )); then
        if [[ -v options[cmd-name] ]]; then
            _ws-clone-usage "$options[cmd-name]"
        else
            _ws-clone-usage
        fi

        if [[ -v flags[error] ]]; then
            return $flags[error]
        fi
    fi

    set -- "${positional_args[@]}"

    local remote_url=$1

    if [[ ! -v remote_url || -z "${remote_url}" ]]; then
        print-header -e "Remote URL not provided."
        _usage
        return 1
    fi

    if [[ -v options[softlink-root] ]]; then
        if [[ ! -e "${options[softlink-root]}" ]]; then
            print-header -e "soft link root '$softlink_root' does not exist"
            return 1
        elif [[ ! -d "${options[softlink-root]}" ]]; then
            print-header -e "soft link root '$softlink_root' is not a directory"
            return 1
        fi
    fi

    local root="${options[root]:-"$WORKSPACE_ROOT_DIR"}"
    local name="${2:-"${remote_url:t:r}"}"

    # Run this in a subshell so the cd isn't carried over in the event of an error.
    (
        setopt err_return

        cd ${(q)WORKSPACE_ROOT_DIR}
        git clone "${remote_url}" "${name}" "$@"
    )

    local root="${root:A}"
    local ws_dir="${WORKSPACE_ROOT_DIR:A}"
    if (( do_softlink )) && [[ ! -v options[softlink-root] && "${root}" != "${ws_dir}" ]]; then
        options[softlink-root]="${ws_dir}"
    fi

    if [[ -v options[softlink-root] ]]; then
        ln -s "${WORKSPACE_ROOT_DIR}/${name}" "${options[softlink-root]}/${name}"
    fi

    if (( code )); then
        wscode "${name}"
    fi
}

ws-clone "$@"
