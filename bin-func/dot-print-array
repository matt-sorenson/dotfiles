#! /usr/bin/env zsh
#compdef dot-print-array

dot-print-array() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    local _usage="Usage: dot-print-array [-h|--help] <array_name>

Options:
  -h, --help    Show this message"

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    min_positional_count=1
    max_positional_count=1

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then # Help was output
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    local array_name="${positional_args[1]}"

    local type
    if ! type="$(typeset -p "$array_name" 2>/dev/null)"; then
        print-header -e "Error: '$array_name' is not defined."
        return 1
    fi

    if [[ "$type" == *-A* ]]; then
        print-header -e "Error: '$array_name' is an associative array, not a normal indexed array."
        return 1
    fi

    local values
    eval "values=(\"\${${array_name}[@]}\")"
    local i=1 val
    for val in "${values[@]}"; do
        printf "%d: %s\n" "$i" "$val"
        ((i++))
    done
}

dot-print-array "$@"
