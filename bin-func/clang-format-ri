#! /usr/bin/env zsh
#compdef clang-format-ri

clang-format-ri() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return
    setopt typeset_to_unset
    setopt warn_create_global
    unsetopt short_loops

    if ! command -v clang-format > /dev/null; then
        print-header -e "ERROR: clang-format not found. Please install clang-format to use this script."
        return 1
    fi

    local _usage="Usage: clang-format-ri [options] <source-path> -- [<clang-format-options>...]
Recursively format C++ source files in place using clang-format.

Options:
  -e, --extension <exts>    List of extensions in a ':' seperated list
                            ex: '.cpp:.h:.hpp'
  -h, --help                Show this help message and exit"

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    option_args[extensions]=1
    short_to_long_opts[e]=extensions
    max_positional_count=1
    allow_extra_args=1

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    set -- "${positional_args[@]}"

    local -a extensions=( "*.cpp" "*.h" "*.hpp" "*.inl" )
    local srcpath

    if [[ -v 'options[extensions]' ]]; then
        extensions=("${(@s/:/)options[extensions]}")
    fi

    if (( ! $# )); then
        print-header -e "Source path is required."
        print "${_usage}"
        return 1
    elif [[ ! -d "$1" ]]; then
        print-header -e "Source path is not a directory: ${srcpath}"
        return 1
    else
        srcpath="$1"
    fi

    local filters=()
    local ext
    for ext in "${extensions[@]}"; do
        filters+=( -iname "${ext}" -o )
    done

    # Remove the final '-o'
    unset 'filters[-1]'

    find "${srcpath}" -type f '(' "${filters[@]}" ')' -exec clang-format -i -style=file "$extra_args[@]" {} \;
}

clang-format-ri "$@"
