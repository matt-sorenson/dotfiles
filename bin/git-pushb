#!/usr/bin/env zsh
#compdef git-pushb

emulate -L zsh
set -uo pipefail
setopt err_return
setopt warn_create_global
unsetopt short_loops

local _usage="Usage: git-pushb [-h|--help] [-b <branch> | <branch>]

Push a branch onto the stach and check it out.

Arguments:
  <Branch>    The branch to check out.

Options:
  -b <branch>   Create a new branch and check it out.
  -h, --help    Show this help message

any flag from 'git checkout' that doesn't take a value can be passed in as an
option (unless the value is passed in as part of the same argument, ie '--conflict=<style>').

The only un-named argument can be the branch name (if -b is not used). If
multiple positional arguments are provided then the command will fail."

local new_branch=
local -a arguments=()

# Help check
while (( $# )); do
    case "$1" in
    -h|--help)
        print "${_usage}"
        return 0
        ;;
    -b|--branch)
        if (( $# < 2 )); then
            print-header red "Missing argument for '$1'"
            print "${_usage}"
            return 1
        elif [ -z "${new_branch}" ]; then
            new_branch="$2"
            arguments+=("$1" "$2")
            shift
        else
            print-header red "Invalid '$1' - a branch has already been provided '${new_branch}'"
            print "${_usage}"
            return 1
        fi
        ;;
    --)
        shift
        # add all remaining as-is
        arguments+=("$@")
        # clear all remaining arguments
        set --
        ;;
    -*)
        arguments+=("$1")
        ;;
    *)
        if [ -z "${new_branch}" ]; then
            new_branch="$1"
            arguments+=("$1")
        else
            print-header red "Unknown argument: $1"
            print "a branch has already been provided."
            print "${_usage}"
            return 1
        fi
        ;;
    esac
    shift
done

if [[ -z "${new_branch}" ]]; then
    print-header red "No branch specified."
    print "Please provide a branch name to check out."
    print "${_usage}"
    return 1
fi

# find repo root
local repo_root
repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || {
    print 'Not a git repository.' >&2
    return 1
}

# get current branch
local current_branch
current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null) || {
    print 'Failed to determine current branch.' >&2
    return 1
}

# if user asked to pushb into the same branch, do nothing
if [[ "${new_branch}" = "${current_branch}" ]]; then
    return 0
fi

local stack_file="${repo_root}/.ms-popb-stack"

# ensure stack exists, then push current branch
mkdir -p "$(dirname "${stack_file}")"
print "${current_branch}" >> "${stack_file}"

git checkout "${arguments[@]}"
