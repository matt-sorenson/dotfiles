#!/usr/bin/env zsh
#compdef dot-check-for-update-git

function() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return
    setopt typeset_to_unset

    local _usage="dot-check-for-update-git [-h|--help][-q|quiet][-i|--indent <indent>] <dir>

Options:
  -h, --help            Show this help message
  -q, --quiet           Suppress some warnings.
  -i, --indent <indent> Set the indent level for headers messages (default: 0)

If no flags are provided then it's treated as if all flags are set."

    local quiet=0
    local indent=0
    local dir

    while (( $# )); do
        case $1 in
            -h|--help)
                print "${_usage}"
                return 0
                ;;
            -q|--quiet)
                quiet=1
                ;;
            -i|--indent)
                if (( $# < 2 )); then
                    print-header -e -i "$indent" "${dir:-Unknown Repo}: Expected an indent value after '$1'"
                    print "${_usage}"
                    return 1
                fi
                shift
                indent="$1"
                ;;
            -*)
                print-header -e -i "$indent" "${dir:-Unknown Repo}: Called dot-check-for-update with unknown option '$1'"
                print "${_usage}"
                return 1
                ;;
            *)
                if [[ -v dir ]]; then
                    print-header -e -i "$indent" "${dir:-Unknown Repo}: Called dot-check-for-update with unexpected argument '$1'"
                    print "${_usage}"
                    return 1
                fi

                dir=$1
                ;;
        esac
        shift
    done

    if [[ ! -v dir ]]; then
        print-header -e -i "$indent" "Unknown Repo: Called dot-check-for-update-git without a directory"
        return 1
    fi

    local log_dir
    case $dir in
        "${HOME}")
            # exactly $HOME → "~"
            log_dir='~'
            ;;
        "${HOME}"/*)
            # starts with $HOME/ → "~/…"
            log_dir="~${dir#"${HOME}"}"
            ;;
        *)
            log_dir="${dir}"
            ;;
    esac

    if [[ ! -d "${dir}" ]]; then
        print-header -w -i "$indent" "${log_dir}: Missing Directory"
        return 0
    elif ! git -C "${dir}" rev-parse --is-inside-work-tree &>/dev/null; then
        if (( quiet )); then
            print-header -w -i "$indent" "${log_dir}: Directory not a git repo"
        else
            print "${log_dir}: Directory not a git repo"
        fi
        return 0
    elif [[ "$(git -C "$dir" rev-parse --show-toplevel 2>/dev/null)" != "$dir" ]]; then
        print-header blue -i "$indent" "${log_dir}: Directory is not the root of a git repository, skipping"
        return 0
    fi

    print-header green -i "$indent" "${log_dir}: $*"

    local remotes
    remotes=(${(f)"$(git -C "${dir}" remote)"}) # zsh handles spaces correctly with (f)
    if (( ${#remotes} == 0 )); then
        if (( ! quiet )); then
            print-header -w -i "$indent" "${log_dir}: No git remote found, skipping update"
        else
            print "Directory not a git repo"
        fi
        return 0
    fi

    git -C "${dir}" fetch

    local branch
    branch="$(git -C "${dir}" rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)"
    if [[ -n "${branch}" ]]; then
        if git -C "${dir}" merge-base --is-ancestor HEAD "${branch}"; then
            git -C "${dir}" merge "${branch}"
        elif ! git -C "${dir}" merge-base --is-ancestor "${branch}" HEAD; then
            print-header -e -i "$indent" "${log_dir}: Local branch has diverged from upstream"
            return 1
        fi
    else
        print-header -e -i "$indent" "${log_dir}: No upstream branch found for $(git -C "${dir}" rev-parse --abbrev-ref HEAD)"
        return 0
    fi

    git -C "${dir}" diff --quiet --ignore-submodules HEAD || {
        print-header -e -i "$indent" "${log_dir}: Uncommitted changes found"
        return 1
    }

    # Check if branch is behind or has diverged (but NOT just ahead)
    local behind_ahead
    if behind_ahead=$(git -C "${dir}" rev-list --left-right --count HEAD...@{u} 2>/dev/null); then
        local ahead behind
        ahead=$(print "${behind_ahead}" | awk '{print $1}')
        behind=$(print "${behind_ahead}" | awk '{print $2}')

        if (( behind > 0 && ahead > 0 )); then
            print-header -e -i "$indent" "${log_dir}: Branch has diverged from upstream. ${ahead} commits ahead and ${behind} commits behind"
            return 1
        elif (( behind > 0 )); then
            print-header -e -i "$indent" "${log_dir}: Branch is behind upstream by ${behind} commits"
            return 1
        elif (( ahead > 0 )); then
            if (( ! quiet )); then
                print "${log_dir}: Branch is ahead of upstream by ${ahead} commits"
            fi
        fi
    else
        print-header -w -i "$indent" "${log_dir}: Unable to compare with upstream for"
        return 1
    fi

    return 0
} "$@"
