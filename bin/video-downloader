#!/bin/sh

# video-downloader: download a video or list of URLs via youtube-dl
# Usage:
#   video-downloader <url_or_file>

set -euo pipefail

# Function to process a single URL
process_url() {
    url=$1
    done_file=$2

    # Initialize done file if needed
    if [ ! -f "${done_file}" ]; then
        : > "${done_file}"
    fi

    # Skip if already processed
    if grep -F -x "${url}" "${done_file}" >/dev/null 2>&1; then
        printf '[SKIP] %s already processed.\n' "${url}"
        return
    fi

    # Download
    printf '[DOWNLOAD] %s\n' "${url}"
    if $ytdl_cmd $ytdl_opts "${url}"; then
        printf '%s\n' "${url}" >> "${done_file}"
        printf '[OK] "%s" recorded in "%s"\n' "${url}" "${done_file}"
    else
        printf '[ERROR] Failed to download "%s"\n' "${url}"
    fi
}

# Check args
if [ $# -lt 1 ]; then
    printf 'Usage: %s <URL or file containing URLs>\n' "$0"
    exit 1
fi

input=$1
ytdl_cmd=youtube-dl
ytdl_opts="-f bestvideo[ext=mp4]+bestaudio[ext=m4a]"

case "${input}" in
    http* )
        # Direct URL
        $ytdl_cmd $ytdl_opts "${input}"
        ;;
    * )
        # Local file: read URLs line by line
        if [ ! -f "${input}" ]; then
            printf "Error: File '%s' not found.\n" "${input}" >&2
            exit 1
        fi

        # Determine .done filename (basename + .done)
        base=$(basename "${input}")
        done_file="${PWD}/${base}.done"

        while IFS= read -r url; do
            # Skip empty or comment lines
            case "${url}" in
                ''|\#*) continue ;;
            esac
            process_url "${url}" "${done_file}"
        done < "${input}"
        ;;
esac
