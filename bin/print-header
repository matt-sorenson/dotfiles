#! /usr/bin/env zsh
#compdef print-header

function print-header() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return
    setopt typeset_to_unset
    setopt warn_create_global
    unsetopt short_loops

    if ! command -v colors > /dev/null; then
        autoload -Uz colors && colors
    fi

    if ! command -v is-emoji &> /dev/null; then
        is-emoji() {
            emulate -L zsh
            set -uo pipefail
            setopt err_return

            local -i codepoint=$(printf '%d' "'$1")

            (( (codepoint >= 0x1F600 && codepoint <= 0x1F64F) ||
            (codepoint >= 0x1F300 && codepoint <= 0x1F5FF) ||
            (codepoint >= 0x1F680 && codepoint <= 0x1F6FF) ||
            (codepoint >= 0x1F900 && codepoint <= 0x1F9FF) ))
        }
    fi

    local _usage="Usage: print-header [-h|--help] [-i <indent>|--indent <indent>] [<color>...] [--] <message>

Arguments:
  <color>                        The color of the header (e.g., red, green, blue, bgred, ...)
  <message>                      The message to display in the header

Options:
  -h, --help                     Show this help message and exit
  --icon <icon-emoji>            Prepend this emoji to the message, combines with -w/-e
  -w, --warn                     Shortcut for 'yellow --icon ⚠️'
  -e, --error                    Shortcut for 'red --icon ❌'
  -i <indent>, --indent <indent> Indent the header by the specified number of spaces (default: 0)
  --stderr                       Write the header to stderr instead
  --no-color                     Ignore any input colors
  --                             (optional) Marks the end of flags, anything after this is treated as the message.
                                 If your message starts with '--' it must either contain a space or come after the -- flag"

    eval "$(<"${DOTFILES}/zsh/dot-parse-opts-init.zsh")"

    flags[color]=1
    flags[stderr]=0
    flags[error]=0
    flags[warn]=0
    short_to_long_flags[e]=error
    short_to_long_flags[w]=warn

    local -a icons=()
    option_args[icon]='array:icons'
    option_args[indent]=int
    short_to_long_opts[i]=indent

    max_positional_count=-1
    extra_args_are_positional=1

    eval "$(< "${DOTFILES}/zsh/dot-parse-opts.zsh")"

    local color=''
    local -a parts=()

    while (( $# )); do
        case "$1" in
        black|red|green|yellow|blue|magenta|cyan|white)
            color="${color}${fg_bold[${1}]}"
            ;;
        bgblack|bgred|bggreen|bgyellow|bgblue|bgmagenta|bgcyan|bgwhite)
            color="${color}${bg[${1#bg}]}"
            ;;
        *) break ;;
        esac
        shift
    done

    parts+=("$@")
    set --

    if (( flags[error] )); then
        color="${fg_bold[red]}"
        icons=("❌" "${icons[@]}")
    elif (( flags[warn] )); then
        color="${fg_bold[yellow]}"
        icons=("⚠️" "${icons[@]}")
    fi

    if [[ ! -v 'options[indent]' ]]; then
        options[indent]=0
    fi

    local message="= "
    if (( #icons )); then
        message+="${(j::)icons} "
    fi
    if (( ${#parts[@]} )); then
        message+="${(j: :)parts}"
    else
        message+="No message provided."
        color="$bg[magenta]$fg[black]"
    fi
    unset parts

    local msg_length=$(( ${#message} + 2))
    # Handle emojis that render as 2 characters
    local -a chars
    local char
    chars=(${(@ps::)message})
    for char in $chars; do
        if is-emoji "$char"; then
            (( msg_length+=1 ))
        fi
    done

    local header_length=$(( msg_length > 80 ? msg_length: 80 ))
    local indent_space="${(l:${options[indent]}:: :):-}"
    local header="${(l:$header_length::=:):-}"

    # \uFE0F renders as a zero-width space so we add a space after it to
    # ensure it displays correctly
    local modifier=$'\uFE0F'
    message="${message//${modifier}/${modifier} }"
    unset modifier

    # Pad the message to header length in case a background color was set
    message+="${(l:$(( header_length - msg_length )):: :):-} ="

    local arg=''
    if (( flags[stderr] )); then
        arg='-u2'
    fi

    local reset_color=${reset_color}
    if (( ! flags[color] )) || [[ -z $color ]]; then
        color=''
        reset_color=''
    fi

    print $arg "${indent_space}${color}${header}
${indent_space}${color}${message}
${indent_space}${color}${header}${reset_color}"
}

print-header "$@"
