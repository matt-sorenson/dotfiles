#! /usr/bin/env zsh
#compdef git-stack

git-stack() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return
    setopt typeset_to_unset
    setopt warn_create_global
    setopt extended_glob
    unsetopt short_loops

    local _usage="Usage: git-stack [-h|--help] [-<d>]

    Display the saved branch stack (oldest at the top, newest at the bottom).

    -c, --clear           Clear the branch stack
    -h, --help            Show this help message
    -l, --lines <lines>   Show a maximum of <d> elements of the stack"

    local -i max_lines

    eval "$(<"${DOTFILES}/zsh/dot-parse-opts-init.zsh")"

    flags[clear]=0
    flags[quiet]=0
    short_to_long_flags[c]=clear
    short_to_long_flags[q]=quiet

    option_args[lines]=int
    short_to_long_opts[l]=lines

    eval "$(< "${DOTFILES}/zsh/dot-parse-opts.zsh")"


    # Find repo root
    local repo_root
    repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || {
        print-header -e "Not a git repository.";
        return 1;
    }

    local stack_file="${repo_root}/.ms-popb-stack"

    if (( flags[clear] )); then
        if [[ -f "$stack_file" ]]; then
            rm "${stack_file}"

            if (( ! flags[quiet] )); then
                print-header green "Cleared branch stack."
            fi
        fi
    else
        if [[ ! -s "${stack_file}" ]]; then
            if (( ! flags[quiet] )); then
                print-header yellow "Branch stack is empty."
            fi
        else
            if [[ -v 'options[lines]' ]]; then
                nl -n rz -w 3 "${stack_file}" | tail -n ${options[lines]}
            else
                nl -n rn -w 3 "${stack_file}"
            fi
        fi
    fi
}

git-stack "$@"
