#! /usr/bin/env zsh
#compdef git-dag

git-dag() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global

    unsetopt short_loops

    local format='%C(bold blue)%h%C(bold green) (%ar) %aN%C(reset) - %C(white)%s %C(bold yellow)%d%C(reset)'

    local _usage="Usage: git-dag [-h|--help] [-a|--all] [<branch> <branch> ...]
    Displays the git commit history in a directed acyclic graph format.

    Arguments:
    <branch>      A git branch to include in the dag

    Options:
    -h, --help    Show this message
    -a, --all     Show all branches

    If no branches are specified it will show the current branch and if they exist master and main."

    git rev-parse --show-toplevel &> /dev/null || {
        print-header -e 'Not a git repository.' >&2
        return 1
    }

    eval "$(dot-parse-opts --dot-parse-opts-init)"
    flags[all]=0

    max_positional_count=-1

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then # Help was output
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    set -- "${positional_args[@]}"

    if (( flags[all] && $# )); then
        print-header -e "Cannot use --all and provide branch names together."
        print "${_usage}"
        return 1
    fi

    local -a branches=()
    while (( $# )); do
        if ! git show-ref --quiet "$1"; then
            print-header -e "Branch '$1' does not exist." >&2
            return 1
        fi

        branches+=("$1")
        shift
    done

    local -a git_flags=()

    if (( ! flags[all] )); then
        git_flags+=("${branches[@]}")

        local current_branch
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        if (( branches[(i)$current_branch] == 0 )) && [[ $current_branch != master && $current_branch != main ]]; then
            git_flags+=("${current_branch}")
        fi

        if (( branches[(i)master] == 0 )) && git show-ref --verify --quiet refs/heads/master; then
            git_flags+=(master)
        fi

        if (( branches[(i)main] == 0 )) && git show-ref --verify --quiet refs/heads/main; then
            git_flags+=(main)
        fi
    else
        git_flags+=("--all")
    fi

    git log --graph --abbrev-commit --decorate --format=format:"${format}" "${git_flags[@]}" "${extra_args[@]}"
}

git-dag "$@"
