#! /usr/bin/env zsh
#compdef git-ppull

git-ppull() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return
    setopt extended_glob
    setopt local_loops
    setopt null_glob
    setopt typeset_to_unset
    setopt warn_create_global
    unsetopt short_loops

    local _usage='Usage: git-ppull [options]

Prune local branches that have been deleted on the remote.

Flags:
  -h, --help      Show this help message
  -f, --force     Force delete branches without confirmation

Options:
  -e, --exclude         Exclude by name
  -p, --exclude-pattern Exclude by glob pattern (make sure to quote it!)'

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    local -a exclude_names=()
    local -a exclude_patterns=()

    flags[force]=0
    short_to_long_flags[f]=force

    option_args[exclude]='array:exclude_names'
    option_args[exclude-pattern]='array:exclude_patterns'
    short_to_long_opts[e]='exclude'
    short_to_long_opts[p]='exclude-pattern'

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    git pull --prune

    local lines branch
    if ! lines=$(git branch -vv | grep '\[.*: gone\]'); then
        print "No branches to prune."
        return
    fi

    print-header cyan "Branches to prune:"

    local exclude_name exclude_pattern REPLY
    awk '{print $1}' <<< "$lines" | while read -r branch; do
        for exclude_name in "${exclude_names[@]}"; do
            if [[ "$branch" == "$exclude_name" ]]; then
                print "Skipping branch '$branch' due to exclude name '$exclude_name'."
                continue 2
            fi
        done

        for exclude_pattern in "${exclude_patterns[@]}"; do
            if [[ "$branch" == $~exclude_pattern ]]; then
                print "Skipping branch '$branch' due to exclude pattern '$exclude_pattern'."
                continue 2
            fi
        done

        if (( flags[force] )); then
            if ! git branch -D "$branch"; then
                print-header -e "Failed to delete branch '$branch'. It may not be fully merged."
            fi
        else
            print -n "Delete branch '$branch'? [y/N] "
            if read -q; then
                print
                if ! git branch -D "$branch"; then
                    print-header -e "Failed to delete branch '$branch'. It may not be fully merged."
                fi
            else
                print
                print "Skipped branch '$branch'."
            fi
        fi
    done
}

git-ppull "$@"
