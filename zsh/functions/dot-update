#! /usr/bin/env zsh
#compdef dot-update

dot-update() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    local doomemacs_bin="${DOOMEMACS_BIN:-${HOME}/.config/emacs/bin/doom}"

    local _usage="dot-update [-h|--help][-g|--git][-l|--local][-b|--brew][-d|--doom] [--auto] [+z|--no-zrestart]

Options:
  --auto            Automatically update dotfiles if they haven't been updated recently (Same calendar day)
  +z, --no-zrestart On success do not restart the zsh shell.
                    This is normally used so the interactive shell is updated, but does lose some state.
  -h, --help        Show this help message and exit

Tasks:
  -d, --[no-]dotfiles Update dotfiles reposito
  -p, --[no-]plugins  Update \$DOTFILES/plugins/* folders
  -l, --[no-]local    Update local scripts
  -b, --[no-]brew     Update brew
  -e, --[no-]doom     Update doom emacs

If no tasks are provided then it's treated as if all flags are set.
For all tasks the shortflag can use +<flag> to disable similar to --no-<task>."

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    local -a tasks=(
        dotfiles
        plugins
        local
        brew
        doom
    )

    flags[zrestart]=1
    flags[auto]=0
    short_to_long_flags[z]=zrestart

    local task
    for task in "${tasks[@]}"; do
        flags[$task]=1
    done

    short_to_long_flags[d]=dotfiles
    short_to_long_flags[p]=plugins
    short_to_long_flags[l]=local
    short_to_long_flags[b]=brew
    short_to_long_flags[e]=doom

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then # Help was output
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    local update_filename="${DOTFILES}/tmp/dotfile-update"

    local current_date update_date
    current_date="$(date +'%Y-%m-%d')"

    if (( flags[auto] )); then
        if [[ -r "${update_filename}" ]]; then
            update_date="$(<"${update_filename}")"
        else
            update_date=''
        fi

        if [[ "${update_date}" != "${current_date}" ]]; then
            local REPLY
            print -n "It's been a while, update dotfiles? "
            read -q
            print ''
            if [[ "${REPLY}" != "y" ]]; then
                return 0
            fi
            unset REPLY
        else
            return 0
        fi
    fi

    # We use `out` instead of exiting early so that we can try to update
    # everything even if one fails
    local -i out=0
    local all_set=$((flags[dotfiles] && flags[plugins] && flags[local] ))

    if command -v brew &> /dev/null; then
        if [[ ! -v flags_set[brew] ]]; then
            flags[brew]=0
        elif (( flags[brew])); then
            flags[brew]=0
            all_set=0
            out=1
            print-header -e -i 2 "brew is not installed."
        fi
    fi

    if command -v "${doomemacs_bin}" &> /dev/null; then
        if [[ ! -v flags_set[doom] ]]; then
            flags[doom]=0
        elif (( flags[doom] )); then
            flags[doom]=0
            all_set=0
            out=1
            print-header -e -i 2 "doom emacs is not installed."
        fi
    fi

    if (( flags[dotfiles] )); then
        print-header green "Updating dotfiles repo."
        if [[ -d "${DOTFILES}" ]]; then
            local dotfiles_starting_commit="$(git rev-parse --short HEAD)"

            if dot-update-git "${DOTFILES}"; then
                # If hammerspoon exists we may have updated the config while updating
                # the dotfiles, so we need to reload it.
                if command -v "hs" > /dev/null; then
                    local dotfiles_ending_commit="$(git rev-parse --short HEAD)"
                    local hs_changes="$(git diff --name-only "$dotfiles_starting_commit" "$dotfiles_ending_commit" -- hammerspoon/))"

                    if [[ -n ${#hs_changes} ]]; then
                        print-header green "Reloading hammerspoon"
                        hs -c "hs.reload()" | dot-indent-output -i 2
                    fi
                fi
            else
                out=1
            fi
        else
            print-header -w "${DOTFILES} does not exist, skipping dotfiles update."
        fi
    fi

    print-header green "Updating plugins."
    if (( flags[plugins] )); then
        local repos_to_update=( "${DOTFILES}"/plugins/*(/) ) # ZSH Does handle spaces in the glob correctly.
        local repo
        for repo in "${repos_to_update[@]}"; do
            if [[ $repo == */local ]]; then
                continue
            fi

            print-header -i 2 cyan "Updating '${repo:t}'"
            if ! dot-update-git "${repo}" | dot-indent-output -i 2; then
                out=1
            fi
        done
    fi

    if [[ "${OSTYPE}" == darwin* ]] && (( flags[brew] )); then
        print-header green "Updating brew."

        if brew update | dot-indent-output -i 2; then
            if ! brew upgrade | dot-indent-output -i 2; then
                print-header -e -i 2 "brew: Failed to upgrade."
                out=1
            fi
        else
            print-header -e -i 2 "brew: Failed to update."
            out=1
        fi
    fi

    if (( flags[local] )); then
        if ! dot-update-git --extra-quiet "${DOTFILES}/local" | dot-indent-output -i 2; then
            out=1
        fi

        # You can specify a local update function in your "$DOTFILES/local/zsh"
        # files or in $DOTFILES/local/bin
        if command -v "dot-update-local" > /dev/null; then
            if ! dot-update-local; then
                out=1
            elif [[ -v flags_set[local] ]]; then
                print-header -e -i 2 "dot-update-local is not available."
                out=1
            else
                print-header -w -i 2 "dot-update-local is not available."
            fi
        fi
    fi

    if (( flags[doom] )); then
        print-header green "Updating doom emacs."

        if ! "${doomemacs_bin}" upgrade --aot --force --color; then
            print-header -e -i 2 "doom emacs failed to upgrade."
            out=1
        fi
    fi

    # Only update the timestamp if all updates were successful & we didn't
    # skip any updates
    if (( ! out && all_set )); then
        mkdir -p "${DOTFILES}/tmp/"
        print -n "${current_date}" >! "${update_filename}"
    fi

    if (( flags[zrestart] )); then
        print-header green "Restarting zsh"
        zrestart
    fi

    return $out
}

dot-update "$@"
