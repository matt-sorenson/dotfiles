#! /usr/bin/env zsh
#compdef aws-signon

aws-signon() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    local _usage='Usage: aws-signon [-f|--force] [-h|--help] [-c|--command <command>] [--logged-in-command <command>] <profile>

Arguments:
  <profile>                     AWS profile to sign into

Options:
  -f, --force                   Force login even if already signed in
  +n, --[no-]node-env           Do not update $NODE_ENV from the $AWS_PROFILE
  -c, --command <command>       Alternative command to use to sign on
  --logged-in-command <command> Alternative command to use for checking if alreay logged in
  -h, --help                    Show this help message

Notes:

  --command/--logged-in-command:
    the command provided to --command/--logged-in-command should just need the profile added as a flag.
    If not provided with --command/--logged-in-command will fall back to the aws cli.

  <profile>: if profile is not provided this will fall back to $AWS_PROFILE or $NODE_ENV if available.

Examples:
  aws-signon -f dev
  aws-signon dev
  aws-signon dev -f'

    eval "$(dot-parse-opts --dot-parse-opts-init)"

    short_to_long_flags[f]=force
    flags[force]=0
    flags[node-env]=0
    short_to_long_opts[n]=node-env
    max_positional_count=1
    option_args[command]=str
    short_to_long_opts[c]=command
    option_args[logged-in-command]=str
    dot_parse_opts_errors[too-many-positional]='Profile can only be specified once'

    local dot_parse_code=0
    dot-parse-opts "$@" || dot_parse_code=$?
    if (( -1 == dot_parse_code )); then # Help was output
        return 0
    elif (( dot_parse_code )); then
        return $dot_parse_code
    fi

    set -- "${positional_args[@]}"

    if [[ ! -v 'options[command]' ]]; then
        options[command]='aws sso login --profile'
    fi

    local cmd_array=("${(z)options[command]}")
    if ! command -v "${cmd_array[1]}" &> /dev/null; then
        print-header -e "Command '${cmd_array[1]}' not found"
        return 1
    fi

    export AWS_PROFILE
    if (( $# )); then
        AWS_PROFILE="$1"
        set --
    elif [[ -v AWS_PROFILE ]] && [[ -n "${AWS_PROFILE}" ]]; then
        print "No profile specified, using \$AWS_PROFILE: ${AWS_PROFILE}"
    elif [[ -v NODE_ENV ]] && [[ -n "${NODE_ENV}" ]]; then
        case "${NODE_ENV}" in
        devenv)
            AWS_PROFILE='devenv'
            ;;
        dev)
            AWS_PROFILE='dev'
            ;;
        staging)
            AWS_PROFILE='staging'
            ;;
        production)
            AWS_PROFILE='production'
            ;;
        *)
            print-header -e "Unknown \$NODE_ENV '${NODE_ENV}'."
            print "${_usage}"
            return 1
            ;;
        esac

        print-header cyan "Using \$NODE_ENV: ${NODE_ENV} to map to AWS profile ${AWS_PROFILE}."
    else
        unset AWS_PROFILE
        print-header -e 'No profile specified and $AWS_PROFILE & $NODE_ENV are not available!'
        print "${_usage}"
        return 1
    fi

    if [[ ! -v NODE_ENV ]]; then
        export NODE_ENV
        case "${AWS_PROFILE}" in
        devenv)     NODE_ENV='devenv' ;;
        dev)        NODE_ENV='dev' ;;
        staging)    NODE_ENV='staging' ;;
        production) NODE_ENV='production' ;;
        esac
    fi

    if [[ "${AWS_PROFILE}" == 'devenv' ]]; then
        AWS_PROFILE='dev'
    fi

    print-header green --icon 🔐 "Signing into AWS: ${AWS_PROFILE}"

    if (( ! flags[force] )); then
        if [[ ! -v 'options[logged-in-command]' ]]; then
            options[logged-in-command]='aws sts get-caller-identity --profile'
        fi

        local logged_in_cmd_array=("${(z)options[logged-in-command]}")
        if ! command -v "${logged_in_cmd_array[1]}" &> /dev/null; then
            print-header -e "Command '${logged_in_cmd_array[1]}' not found"
            return 1
        fi

        local logged_in_cmd="${logged_in_cmd_array[1]}"
        local logged_in_args=("${logged_in_cmd_array[@]:1}" "${AWS_PROFILE}")

        if $logged_in_cmd "${logged_in_args[@]}" > /dev/null; then
            print "already signed in as ${AWS_PROFILE}"
            return 0
        fi

        print "not signed in, attempting SSO login for '${AWS_PROFILE}'..."
    fi

    local cmd="${cmd_array[1]}"
    local args=("${cmd_array[@]:1}" "${AWS_PROFILE}")

    $cmd "${args[@]}"
}

aws-signon "$@"
