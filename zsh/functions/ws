#! /usr/bin/env zsh
#compdef ws

ws() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    function _ws-usage() {
        local -A commands=(
            [ls]="list the contents of \${WORKSPACE_ROOT_DIR} or subdirectory"
        )

        if command -v code &> /dev/null; then
            commands[code]="Open a vscode window in the given project's directory"
        fi

        if command -v cursor &> /dev/null; then
            commands[cursor]="Open a cursor window in the given project's directory"
        fi

        commands[help]="Show this message"

        local -i max_len=0
        local cmd key
        for cmd in ${(f)"$(whence -m 'ws-*')"}; do
            key="${cmd#ws-}"
            commands[$key]="$($cmd --describe)"
        done

        for key in ${(k)commands}; do
            if (( ${#key} > max_len )); then
                max_len=${#key}
            fi
        done

        local command_str=''
        for key in ${(ok)commands}; do
            command_str+="$(printf "  %-${max_len}s  %s" "$key" "${commands[$key]}")\n"
        done

        local _usage="Usage: ws [-h|--help] [<command> <project>[ <args>][ -- <extra args>]]

Arguments:
  <project>   If no command is given then ws attempts 'cd \${WORKSPACE_ROOT_DIR}/<project>'
  <command>   If the ws-<command> exists then it is called with the remaining arguments
  <args>      Any extra args are passed directly to the command

If no arguments are received them ws does 'cd \${WORKSPACE_ROOT_DIR}'

Commands
${command_str}

Options:
  -h, --help    Show this message"

        print "${_usage}"
    }

    function _ws-editor-usage() {
        local cmd
        local title

        if [[ "$1" == "cursor" ]]; then
            cmd="$1"
            title="cursor"
        elif [[ "$1" == "code" ]]; then
            cmd="$1"
            title="vscode"
        else
            # This should never be reached but just in case :shrug:
            _ws-usage
            return 1
        fi

        print "Usage: ws ${cmd} <project> -- <extra args>

Open a ${title} window with the given '\${WORKSPACE_ROOT_DIR}/<project>' working directory"
    }

    TRAPEXIT() {
        dot-safe-unset-function _ws-usage _ws-editor-usage
    }

    # If no arguments are given then we just change to the workspace root directory
    if (( ! $# )); then
        cd "$WORKSPACE_ROOT_DIR"
        return
    fi

    local subcmd="$1"
    shift

    if [[ -d "${WORKSPACE_ROOT_DIR}/$subcmd" ]]; then
        cd "${WORKSPACE_ROOT_DIR}/${subcmd}"
    elif command -v "ws-${subcmd}" &> /dev/null; then
        local cmd="ws-${subcmd}"

        $cmd "$@"
    elif [[ "${subcmd}" == code || "${subcmd}" == cursor ]]; then
        if ! command -v "${subcmd}" &> /dev/null; then
            print-header -e "The '${subcmd}' command is not available."
            return 1
        elif [[ "$1" == --help || "$1" == -h ]]; then
            _ws-editor-usage "${subcmd}"
            return 0
        fi

        local dir="${WORKSPACE_ROOT_DIR}/${1}"
        shift 1

        if (( $# > 0)); then
            if [[ '--' == "$1" ]]; then
                shift 1
            else
                print-header -e "Unknown argument: '$1'"
            fi
        fi

        ${subcmd} "${dir}" "$@"
    elif [[ "${subcmd}" == help || "${subcmd}" == -h || "${subcmd}" == --help ]]; then
        if (( $# )); then
            if command -v "ws-${1}" &> /dev/null; then
                "ws-${1}" --help "$@"
            elif [[ "$1" == code || "$1" == cursor ]]; then
                _ws-editor-usage "$1"
            else
                print-header -e "Unknown command: '$1'."
                _ws-usage
                return 1
            fi
        else
            _ws-usage
        fi
        return 0
    else
        _ws-usage
        return 1
    fi
}

ws "$@"
