#! /usr/bin/env zsh
#compdef dot-parse-opts

# Make sure to `source ${DOTFILES}/zsh/zsh-parse-opts-init.zsh`

## Map short flags (like `-f`) to long flags (`--foo`)
# `+f` will be treated as `--no-foo` in the above example
# local -A short_to_long_flags=()
## short_to_long_flags[f]=foo

## Map short options (like `-f <filename>`) to long options (`--file <filename>`)
# local -A short_to_long_opts=()
## short_to_long_opts[f]=file

## Boolean flags, can pass in as --flag to enable that flag or --no-flag to disable
# local -A flags=()
## flags[verbose]=0
## flags[quiet]=0

## List of accepted arguments
# local -A option_args=()
## option_args[--foo]=1 # Enabled, must have a value but there's no validation
### int, float, file, dir & mkdir are mutually exclusive but not check
### It will only check one so 'int:file' might accept 1 but not /dev/null
### or the other way around. Don't depend on the ordering of checks.
## option_args[--foo]=int # Requires an integer
## option_args[--foo]=float # Requires a float (or int)
## option_args[--foo]=str # Any non-empty string
## option_args[--foo]="enum:a,b,c" # Requires a string that is one of the values in the enum
## option_args[--foo]=file # Requires a filename
## option_args[--foo]=dir # Requires a directory
## option_args[--foo]=mkdir # Requires a directory, but will create it if it doesn't exist
## option_args[--foo]="array:<array_name>" # Each time it's received append to the named array
                                           # Mutually exclusive with overwrite
## option_args[--foo]="overwrite" # Each time it's received overwrite the value
                                  # Usually that's an error but it's useful for some functions
                                  # that expect to be wrapped by other helper functions
                                  # Mutually exclusive with array.
## option_args[--foo]="r"         # Required
### Options are compinable so you can do:
## option_args[--foo]="float:array:<array_name>" # Each time it's received append to the named array, require a float (or int)
## option_args[--foo]="overwrite:int" # Each time it's received overwrite the value, require an integer
## option_args[--foo]="r:float" # Validate that it's a numeber and error out if not received.

## Set max_positional_count to -1 if you don't want to bound the input
# local max_positional_count=0
# local min_positional_count=0

## If enabled anything after '--' will be appended to positional_args instead of extra_args
# local extra_args_are_positional=0
# local allow_extra_args=1

# Do not change the value of these 2 variables, the are for reading after parsing.

## This is where the values of options listed in option_args are stored
# local -A options=()
## This will be any arguments passed in after a lone '--'
# local -a extra_args=()

dot-parse-opts() {
    emulate -L zsh
    set -uo pipefail
    setopt err_return extended_glob null_glob typeset_to_unset warn_create_global
    unsetopt short_loops

    if (( $# == 1 )) && [[ "$1" == '--dot-parse-opts-init' ]]; then
        print '
local -A flags=()
local -A short_to_long_flags=()
local -i allow_duplicate_flags=0
local -A set_flags=()

local -A options=()
local -A option_args=()
local -A short_to_long_opts=()

local -i allow_extra_args=0
local -i extra_args_are_positional=0
local -a extra_args=()

local -i max_positional_count=0
local -i min_positional_count=0
local -a positional_args=()

local -A dot_parse_opts_errors=(
    [too-many-positional]="Too many positional arguments"
    [too-few-positional]="Too few positional arguments"
)'

        return 0
    fi

    local match mbegin mend

    local _usage="${_usage:-No usage info provided.}"

    local flag arg arg_list flag_or_no_flag arg_val array_name array_type
    while (( $# )); do
        case $1 in
        -h|--help)
            if [[ -v flags[help] ]]; then
                flags[help]=1
            else
                print "${_usage}"
                return -1
            fi
            ;;
        --?*)
            flag="${1#--}"
            if [[ -v 'flags[$flag]' ]]; then
                if (( ! allow_duplicate_flags )) && [[ -v 'set_flags[$flag]' ]]; then
                    print-header -e "Flag '$1' has already been set."
                    print "${_usage}"
                    return 1
                fi
                flags[$flag]=1
                set_flags[$flag]=1
            elif [[ -v flags[${flag#no-}] ]]; then
                if (( ! allow_duplicate_flags )) && [[ -v 'set_flags[${flag#no-}]' ]]; then
                    print-header -e "Flag '$1' has already been set."
                    if [[ ! -v flags[help] ]]; then
                       print "${_usage}"
                    fi
                    return 1
                fi
                flags[${flag#no-}]=0
                set_flags[${flag#no-}]=1
            elif [[ -v option_args[$flag] ]]; then
                if (( $# < 2 )); then
                    print-header -e "Flag '$1' requires a value."
                    if [[ ! -v flags[help] ]]; then
                       print "${_usage}"
                    fi
                    return 1
                fi
                shift
                if [[ ":${option_args[$flag]}:" =~ ':enum:([^:]*)' ]]; then
                    if [[ "${1}" == *","* ]]; then
                        print-header -e "Flag '--$flag' requires a single value, not a comma separated list."
                    elif [[ ",${match[1]}," != *",${1},"* ]]; then
                        print-header -e "Flag '--$flag' requires a value that is one of the following: ${match[1]}"
                        print "Recieved '$1'"
                        if [[ ! -v flags[help] ]]; then
                            print "${_usage}"
                        fi
                        return 1
                    fi
                    unset match
                elif [[ ":${option_args[$flag]}:" == *:str:* ]]; then
                    if [[ -z $1  ]]; then
                        print-header -e "Flag '--$flag' requires a non-empty string value."
                        if [[ ! -v flags[help] ]]; then
                            print "${_usage}"
                        fi
                        return 1
                    fi

                elif [[ ":${option_args[$flag]}:" == *:int:* ]]; then
                    if [[ ! $1 =~ ^[-+]?[0-9]+$  ]]; then
                        print-header -e "Flag '--$flag' requires an integer value."
                        if [[ ! -v flags[help] ]]; then
                        print "${_usage}"
                        fi
                        return 1
                    fi
                elif [[ ":${option_args[$flag]}:" == *:float:* ]]; then
                    if [[ ! $1 =~ ^[-+]?[0-9]*\.?[0-9]+$ ]]; then
                        print-header -e "Flag '--$flag' requires a float value."
                        if [[ ! -v flags[help] ]]; then
                        print "${_usage}"
                        fi
                        return 1
                    fi
                elif [[ ":${option_args[$flag]}:" == *:file:* ]]; then
                    if [[ ! -f $1 ]]; then
                        print-header -e "Flag '--$flag' requires a valid file."
                        if [[ ! -v flags[help] ]]; then
                        print "${_usage}"
                        fi
                        return 1
                    fi
                elif [[ ":${option_args[$flag]}:" == *:dir:* ]]; then
                    if [[ ! -d $1 ]]; then
                        print-header -e "Flag '--$flag' requires a valid directory."
                        if [[ ! -v flags[help] ]]; then
                        print "${_usage}"
                        fi
                        return 1
                    fi
                elif [[ ":${option_args[$flag]}:" == *:mkdir:* ]]; then
                    if [[ ! -d $1 ]]; then
                        mkdir -p "$1" || {
                            print-header -e "Flag '--$flag' requires a valid directory, but failed to create it."
                            if [[ ! -v flags[help] ]]; then
                                print "${_usage}"
                            fi
                            return 1
                        }
                    fi
                fi

                if [[ ":${option_args[$flag]}:" == *:array:* ]]; then
                    if [[ ":${option_args[$flag]}:" == *:overwrite:* ]]; then
                        print-header -e "Flag '--$flag' has both overwrite and array set. These are mutually exclusive"
                        return 1
                    fi

                    array_name="${option_args[$flag]#*array:}"
                    array_name="${array_name%%:*}"
                    if array_type="$(typeset -p "$array_name")"; then
                        if [[ "${array_type}" != *' -a '* ]]; then
                            print-header -e "Flag '$1' requires an array to be set, but '${array_name}' is not an array."

                            if [[ ! -v flags[help] ]]; then
                                print "${_usage}"
                            fi

                            return 1
                        fi
                    else
                        print-header -e "Flag '$1' requires an array to be set."
                        if [[ ! -v flags[help] ]]; then
                            print "${_usage}"
                        fi
                        return 1
                    fi

                    eval "$array_name+=(${(q)1})"
                else
                    if [[ -v 'options[$flag]' ]]; then
                        if [[ ":${option_args[$flag]}:" != *':overwrite:'* ]]; then
                            print-header -e "Flag '--$flag' has already been set to '${options[$flag]}'."
                            if [[ ! -v flags[help] ]]; then
                                print "${_usage}"
                            fi
                            return 1
                        fi
                    fi

                    options[$flag]="$1"
                fi
            else
                print-header -e "Unknown flag: $1"
                print "${_usage}"
                return 1
            fi
            ;;
        --)
            shift
            if (( extra_args_are_positional )); then
                positional_args+=("${@}")
            elif (( allow_extra_args )); then
                extra_args+=("${@}")
            else
                print-header -e "Unexpected argument '--'"
                print "${_usage}"
                return 1
            fi

            set --
            break
            ;;
        +*|-*)
            arg_list=( "${(@s::)1#[-+]}" )
            flag_or_no_flag=1
            if [[ "$1" == '+'* ]]; then
                flag_or_no_flag=0
            fi

            # Process by popping front each time
            while (( ${#arg_list} )); do
                arg=${arg_list[1]}
                # Pop the front of the list
                arg_list=("${arg_list[@]:1}")

                if [[ $arg == 'h' ]]; then
                    if [[ -v flags[help] ]]; then
                        flags[help]=1
                    else
                        print "${_usage}"
                        return -1
                    fi
                elif [[ -v "short_to_long_flags[$arg]" ]]; then
                    if (( ! allow_duplicate_flags )) && [[ -v 'set_flags[${short_to_long_flags[$arg]}]' ]]; then
                        print-header -e "Flag '$1' has already been set."
                        print "${_usage}"
                        return 1
                    fi
                    flags[${short_to_long_flags[$arg]}]=${flag_or_no_flag}
                    set_flags[${short_to_long_flags[$arg]}]=1
                elif [[ -v "short_to_long_opts[$arg]" ]]; then
                    flag="${short_to_long_opts[$arg]}"
                    if (( ! flag_or_no_flag )); then
                        print-header -e "Unexpected argument '+$arg'"
                        if [[ ! -v flags[help] ]]; then
                            print "${_usage}"
                        fi
                        return 1
                    elif (( $# < 2 )); then
                        print-header -e "Option '$1' requires a value."
                        if [[ ! -v flags[help] ]]; then
                            print "${_usage}"
                        fi
                        return 1
                    elif (( ${#arg_list} )); then
                        print "Options can only be combined into short flags as the last flag."
                        return 1
                    else
                        arg_val="$2"
                        shift 2
                        # Add the full named option to the front of the args
                        # and continue to the next iteration
                        set -- "--$flag" "$arg_val" "$@"
                    fi
                else
                    print-header -e "Unexpected argument '-$arg'"
                    print "${_usage}"
                    return 1
                fi
            done
            ;;
        *)
            if  (( max_positional_count == -1 )) || (( ${#positional_args[@]} < max_positional_count )); then
                positional_args+=("$1")
            else
                local error="$(printf '%s: %s' "${dot_parse_opts_errors[too-many-positional]}" "[max: $max_positional_count]")"
                print-header -e "${error}"
                print "${_usage}"
                return 1
            fi
            ;;
        esac

        if [[ -v arg_val ]]; then
            # not using a sentinal value here because any value we choose is
            # possibly valid so we use `unset`
            unset arg_val
            local arg_val
        else
            shift
        fi
    done

    if [[ -v flags[help] ]] && (( flags[help] )); then
        return -1
    fi

    if [[ -v min_positional_count ]] && (( #positional_args < min_positional_count )); then
        local error="$(printf "%s: %s" "${dot_parse_opts_errors[too-few-positional]}" "[min: $min_positional_count]")"
        print-header -e "${error}"
        print "${_usage}"
        return 1
    fi

    local key
    for key in "${(@k)option_args}"; do
        if [[ ":${option_args[$key]}:" == *:r:* ]]; then
            if [[ ! -v options[$key] ]]; then
                print-header -e "Option '$key' is required but wasn't provided."
                print "${_usage}"
                return 1
            fi
        fi
    done
}

dot-parse-opts "$@"
